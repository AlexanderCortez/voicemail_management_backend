{"version":3,"sources":["components/global/Navbar.js","components/global/DataTable.js","helpers/parser.js","components/VoiceMailMessages/VoiceMailTable.js","components/global/SnackBar.js","components/VoiceMailMessages/VoiceMailMessagesComponent.js","components/VoiceMailMessages/VoiceMailContainer.js","actions/VoiceMailActions.js","actionTypes/VoiceMailTypes.js","App.js","reducers/VoiceMailReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","defaultProps","table","minWidth","getTableBody","data","columns","keyId","count","TableRow","TableCell","colSpan","size","ToolWrapper","MoveToInbox","style","color","fontSize","map","row","key","column","index","dataKey","formatter","isFunction","getCellContent","DataTable","loading","loadingText","handleChangePage","handleChangeRowsPerPage","rowsPerPage","page","CircularProgress","getLoaderContent","TableContainer","component","Paper","Table","aria-label","TableHead","text","TableBody","TableFooter","TablePagination","rowsPerPageOptions","label","value","onChangePage","onChangeRowsPerPage","TableComponent","props","event","setState","parseInt","target","getData","state","slice","this","rows","Component","styled","div","parseIdentifier","indexOf","split","parsedText","cell","from","to","duration","date","Date","setSeconds","timeString","toISOString","substr","humanizeDuration","length","VoiceMailTable","Alert","children","onClose","elevation","severity","SnackBar","handleClose","open","content","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","styles","box","margin","VoiceMailMessagesComponent","handleSnackbarClose","snackbar","loadingFetch","type","fetchMessages","then","catch","messages","Box","connect","values","VoiceMailReducer","dispatch","axios","get","response","keyBy","payload","App","path","VoiceMailMessages","initialState","action","combineReducers","store","createStore","rootReducers","compose","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.8d7817dc.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = ({ title }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: '',\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isFunction, size } from 'lodash';\nimport styled from 'styled-components';\nimport {\n  Table,\n  TableCell,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n  Paper,\n  TableFooter,\n  TablePagination,\n  CircularProgress,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { MoveToInbox } from '@material-ui/icons';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst getCellContent = (row, column = {}, index) => {\n  const { dataKey, formatter } = column;\n  if (formatter && isFunction(formatter)) {\n    return formatter(dataKey, row, index);\n  }\n  return row[dataKey];\n};\n\nconst getLoaderContent = (loadingText) => (\n  <ToolWrapper>\n    <div>\n      <CircularProgress size={50} />\n    </div>\n    <div>\n      <p>{loadingText}</p>\n    </div>\n  </ToolWrapper>\n);\n\nconst getEmptyContent = () => (\n  <ToolWrapper>\n    <div>\n      <MoveToInbox\n        style={{ color: 'gray', fontSize: 50 }}\n      />\n    </div>\n    <div>\n      <p>No data</p>\n    </div>\n  </ToolWrapper>\n);\n\nconst getTableBody = (data, columns, keyId, count) => {\n  if (count === 0) {\n    return (\n      <TableRow>\n        <TableCell\n          colSpan={size(columns)}\n        >\n          {getEmptyContent()}\n        </TableCell>\n      </TableRow>\n    );\n  }\n  return data.map((row) => (\n    <TableRow key={row[keyId]}>\n      {\n        columns.map((column, index) => {\n          const key = index;\n          return (\n            <TableCell\n              key={key}\n            >\n              {getCellContent(row, column, index)}\n            </TableCell>\n          );\n        })\n      }\n    </TableRow>\n  ));\n};\n\nconst DataTable = ({\n  columns,\n  data,\n  keyId,\n  loading,\n  loadingText,\n  handleChangePage,\n  handleChangeRowsPerPage,\n  rowsPerPage,\n  page,\n  count,\n}) => {\n  const classes = useStyles();\n  if (loading) {\n    return getLoaderContent(loadingText);\n  }\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {\n              columns.map((column, index) => {\n                const key = `${column.text}+${index}`;\n                return (\n                  <TableCell\n                    key={key}\n                  >\n                    {column.text}\n                  </TableCell>\n                );\n              })\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {getTableBody(data, columns, keyId, count)}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              count={count}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nclass TableComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      rowsPerPage: 5,\n    };\n  }\n\n  handleChangePage = (event, page) => {\n    this.setState({\n      page,\n    });\n  };\n\n  handleChangeRowsPerPage = (event) => {\n    const rowsPerPage = parseInt(event.target.value, 10);\n    this.setState({\n      rowsPerPage,\n      page: 0,\n    });\n  };\n\n  getData = () => {\n    const { rowsPerPage, page } = this.state;\n    const { data } = this.props;\n    if (rowsPerPage > 0) {\n      const rows = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n      return rows;\n    }\n    return data;\n  }\n\n  render() {\n    const {\n      columns, keyId, loading, loadingText, data,\n    } = this.props;\n    const { page, rowsPerPage } = this.state;\n    const rows = this.getData();\n    return (\n      <DataTable\n        columns={columns}\n        data={rows}\n        count={size(data)}\n        keyId={keyId}\n        loading={loading}\n        loadingText={loadingText}\n        handleChangePage={this.handleChangePage}\n        handleChangeRowsPerPage={this.handleChangeRowsPerPage}\n        page={page}\n        rowsPerPage={rowsPerPage}\n      />\n    );\n  }\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.instanceOf(Array).isRequired,\n  data: PropTypes.instanceOf(Array).isRequired,\n  keyId: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  count: PropTypes.number.isRequired,\n};\n\nTableComponent.propTypes = {\n  columns: PropTypes.instanceOf(Array).isRequired,\n  data: PropTypes.instanceOf(Array).isRequired,\n  keyId: PropTypes.string.isRequired,\n  loading: PropTypes.bool,\n  loadingText: PropTypes.string,\n};\n\nTableComponent.defaultProps = {\n  loading: false,\n  loadingText: 'Loading ...',\n};\n\nconst ToolWrapper = styled.div`\n  min-height: 100px;\n  width: 100%;\n  padding: 20px 0;\n  div {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nexport default TableComponent;\n","const parseIdentifier = (text = '') => {\n  if (text.indexOf('@')) {\n    const [parsedText] = text.split('@');\n    return parsedText;\n  }\n  return text;\n};\n\nconst humanizeDuration = (duration = 0) => {\n  const date = new Date(0);\n  date.setSeconds(duration);\n  const timeString = date.toISOString().substr(11, 8);\n  return timeString;\n};\n\nexport {\n  parseIdentifier,\n  humanizeDuration,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DataTable from '../global/DataTable';\nimport { parseIdentifier, humanizeDuration } from '../../helpers/parser';\n\nconst columns = [\n  {\n    text: 'Status',\n    dataKey: 'folder',\n  },\n  {\n    text: 'From',\n    dataKey: 'from',\n    formatter: (cell, row) => {\n      const { from } = row;\n      return parseIdentifier(from);\n    },\n  },\n  {\n    text: 'To',\n    dataKey: 'to',\n    formatter: (cell, row) => {\n      const { to } = row;\n      return parseIdentifier(to);\n    },\n  },\n  {\n    text: 'Duration',\n    dataKey: 'length',\n    formatter: (cell, row) => {\n      const { length } = row;\n      return humanizeDuration(length);\n    },\n  },\n];\n\nconst VoiceMailTable = ({\n  data,\n  loading,\n}) => (\n  <DataTable\n    columns={columns}\n    data={data}\n    keyId=\"call_id\"\n    loading={loading}\n  />\n);\n\nVoiceMailTable.propTypes = {\n  data: PropTypes.instanceOf(Array),\n  loading: PropTypes.bool,\n};\n\nVoiceMailTable.defaultProps = {\n  data: [],\n  loading: false,\n};\n\nexport default VoiceMailTable;\n","import React from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\nconst Alert = ({ children, variant, onClose }) => (\n  <MuiAlert\n    elevation={6}\n    variant=\"filled\"\n    severity={variant}\n    onClose={onClose}\n  >\n    {children}\n  </MuiAlert>\n);\n\nconst SnackBar = ({\n  handleClose,\n  open,\n  variant,\n  content,\n}) => (\n  <Snackbar\n    open={open}\n    autoHideDuration={6000}\n    onClose={handleClose}\n    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n  >\n    <Alert\n      onClose={handleClose}\n      variant={variant}\n    >\n      {content}\n    </Alert>\n  </Snackbar>\n);\n\nSnackBar.propTypes = {\n  open: PropTypes.bool,\n  handleClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n  content: PropTypes.node,\n};\n\nSnackBar.defaultProps = {\n  open: false,\n  handleClose: () => {},\n  variant: 'success',\n  content: <div />,\n};\n\nAlert.propTypes = {\n  children: PropTypes.node,\n  variant: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n  onClose: PropTypes.func,\n};\n\nAlert.defaultProps = {\n  children: <div />,\n  variant: 'success',\n  onClose: () => {},\n};\n\nexport default SnackBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport Navbar from '../global/Navbar';\nimport VoiceMailTable from './VoiceMailTable';\nimport SnackBar from '../global/SnackBar';\n\nconst styles = {\n  box: {\n    margin: '20px',\n  },\n};\n\nclass VoiceMailMessagesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadingFetch: false,\n      snackbar: {\n        type: 'success',\n        text: '',\n        open: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { fetchMessages } = this.props;\n    this.setState({ loadingFetch: true });\n    fetchMessages()\n      .then(() => {\n        this.setState({\n          loadingFetch: false,\n          snackbar: {\n            type: 'success',\n            text: 'Messages retrieved',\n            open: true,\n          },\n        });\n      })\n      .catch(() => {\n        this.setState({\n          loadingFetch: false,\n          snackbar: {\n            type: 'error',\n            text: 'Error retrieving messages',\n            open: true,\n          },\n        });\n      });\n  }\n\n  handleSnackbarClose = () => {\n    this.setState(({ snackbar }) => ({\n      snackbar: {\n        ...snackbar,\n        open: false,\n      },\n    }));\n  }\n\n  render() {\n    const { messages } = this.props;\n    const { loadingFetch, snackbar } = this.state;\n    return (\n      <div>\n        <Navbar\n          title=\"VoiceMail Messages\"\n        />\n        <Box\n          component=\"div\"\n          style={styles.box}\n        >\n          <VoiceMailTable\n            data={messages}\n            loading={loadingFetch}\n          />\n        </Box>\n        <SnackBar\n          open={snackbar.open}\n          content={snackbar.text}\n          variant={snackbar.type}\n          handleClose={this.handleSnackbarClose}\n        />\n      </div>\n    );\n  }\n}\n\nVoiceMailMessagesComponent.propTypes = {\n  fetchMessages: PropTypes.func.isRequired,\n  messages: PropTypes.instanceOf(Array).isRequired,\n};\n\nexport default VoiceMailMessagesComponent;\n","import { connect } from 'react-redux';\nimport { values } from 'lodash';\nimport { fetchMessages } from '../../actions/VoiceMailActions';\nimport VoiceMailMessagesComponent from './VoiceMailMessagesComponent';\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchMessages: () => dispatch(fetchMessages()),\n});\n\nconst mapStateToProps = (state) => ({\n  messages: values(state.VoiceMailReducer.messages),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoiceMailMessagesComponent);\n","import axios from 'axios';\nimport { keyBy } from 'lodash';\nimport { FETCH_MESSAGES } from '../actionTypes/VoiceMailTypes';\n\nexport const fetchMessages = () => (dispatch) => axios\n  .get('/api/accounts/messages')\n  .then((response) => {\n    const messages = keyBy(response.data.data, 'call_id');\n    dispatch({\n      type: FETCH_MESSAGES,\n      payload: messages,\n    });\n    return messages;\n  });\n","export const FETCH_MESSAGES = 'FETCH_MESSAGES';\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport VoiceMailMessages from './components/VoiceMailMessages/VoiceMailContainer';\n\nconst App = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={VoiceMailMessages} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","import { FETCH_MESSAGES } from '../actionTypes/VoiceMailTypes';\n\nconst initialState = {\n  messages: {},\n};\n\nconst VoiceMailReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  if (type === FETCH_MESSAGES) {\n    return {\n      ...state,\n      messages: payload,\n    };\n  }\n  return state;\n};\n\nexport default VoiceMailReducer;\n","import { combineReducers } from 'redux';\nimport VoiceMailReducer from './VoiceMailReducer';\n\nexport default combineReducers({\n  VoiceMailReducer,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducers from '../reducers';\n\nconst { NODE_ENV } = process.env;\n\nconst store = NODE_ENV !== 'production'\n  ? createStore(rootReducers, composeWithDevTools(applyMiddleware(ReduxThunk)))\n  : createStore(rootReducers, compose(\n    applyMiddleware(ReduxThunk),\n  ));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nconst { NODE_ENV } = process.env;\n\naxios.defaults.baseURL = NODE_ENV !== 'production' ? 'http://localhost:3001' : '';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}