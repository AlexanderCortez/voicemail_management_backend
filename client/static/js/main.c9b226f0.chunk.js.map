{"version":3,"sources":["actions/AppActions.js","components/global/Navbar.js","components/global/DataTable.js","components/global/Select.js","helpers/parser.js","components/VoiceMailMessages/VoiceMailTable.js","components/global/SnackBar.js","components/VoiceMailMessages/VoiceMailMessagesComponent.js","actions/VoiceMailBoxActions.js","actionTypes/VoiceMailBoxTypes.js","components/VoiceMailMessages/VoiceMailContainer.js","actions/VoiceMailActions.js","actionTypes/VoiceMailTypes.js","components/VoiceMailBoxes/VoiceMailBoxesTable.js","components/VoiceMailBoxes/VoiceMailBoxComponent.js","components/VoiceMailBoxes/VoiceMailBoxContainer.js","App.js","reducers/VoiceMailReducer.js","reducers/VoiceMailBoxReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["getAction","type","payload","goTo","history","route","push","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","defaultProps","table","minWidth","getTableBody","data","columns","keyId","count","TableRow","TableCell","colSpan","size","ToolWrapper","MoveToInbox","style","color","fontSize","map","row","key","column","index","dataKey","formatter","isFunction","getCellContent","DataTable","loading","loadingText","handleChangePage","handleChangeRowsPerPage","rowsPerPage","page","CircularProgress","getLoaderContent","TableContainer","component","Paper","Table","aria-label","TableHead","text","TableBody","TableFooter","TablePagination","rowsPerPageOptions","label","value","onChangePage","onChangeRowsPerPage","TableComponent","props","event","setState","parseInt","target","getData","state","slice","this","rows","Component","styled","div","Input","withStyles","marginTop","input","borderRadius","backgroundColor","palette","background","paper","border","padding","transition","transitions","create","borderColor","boxShadow","InputBase","SelectComponent","currentValue","handleChange","options","Select","onChange","disabled","option","MenuItem","uniqueId","optionValue","getLoaderInCurrentValue","parseIdentifier","indexOf","split","parsedText","statusDropdownOptions","getColumns","actions","status","cell","folder","isLoading","isEmpty","width","getDropDownStatus","handleStatusChange","get","from","to","duration","date","Date","setSeconds","timeString","toISOString","substr","humanizeDuration","length","VoiceMailTable","statusChange","Alert","children","onClose","elevation","severity","SnackBar","handleClose","open","content","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","styles","box","margin","VoiceMailMessagesComponent","handleSnackbarContent","message","snackbar","changeMessageStatus","then","catch","handleSnackbarClose","goToRoot","getHeaderTitle","currentVoiceMailBox","name","fetchMessages","getVoiceMailBoxes","setCurrentVoiceMailBox","match","vmBoxId","params","messages","loadingFetch","Box","BackWardWrapper","Button","onClick","ArrowBackIos","forceFetch","dispatch","getState","vmBoxes","VoiceMailBoxReducer","axios","response","vmBoxesData","keyBy","Promise","resolve","reject","Error","err","connect","VoiceMailReducer","values","id","forFetch","messagesData","messageId","patch","find","vmBox","VoiceMailBoxesTable","handleManageAction","VoiceMailBoxComponent","redirectToMessages","NotFound","App","exact","path","VoiceMailBoxes","VoiceMailMessages","initialState","action","combineReducers","store","createStore","rootReducers","compose","applyMiddleware","ReduxThunk","Boolean","window","location","hostname","defaults","baseURL","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.c9b226f0.chunk.js","sourcesContent":["export const getAction = (type, payload) => ({\n  type,\n  payload,\n});\n\nexport const goTo = (history, route) => {\n  if (history && history.push) {\n    history.push(route);\n  }\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = ({ title }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: '',\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isFunction, size } from 'lodash';\nimport styled from 'styled-components';\nimport {\n  Table,\n  TableCell,\n  TableRow,\n  TableBody,\n  TableHead,\n  TableContainer,\n  Paper,\n  TableFooter,\n  TablePagination,\n  CircularProgress,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { MoveToInbox } from '@material-ui/icons';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst getCellContent = (row, column = {}, index) => {\n  const { dataKey, formatter } = column;\n  if (formatter && isFunction(formatter)) {\n    return formatter(dataKey, row, index);\n  }\n  return row[dataKey];\n};\n\nconst getLoaderContent = (loadingText) => (\n  <ToolWrapper>\n    <div>\n      <CircularProgress size={50} />\n    </div>\n    <div>\n      <p>{loadingText}</p>\n    </div>\n  </ToolWrapper>\n);\n\nconst getEmptyContent = () => (\n  <ToolWrapper>\n    <div>\n      <MoveToInbox\n        style={{ color: 'gray', fontSize: 50 }}\n      />\n    </div>\n    <div>\n      <p>No data</p>\n    </div>\n  </ToolWrapper>\n);\n\nconst getTableBody = (data, columns, keyId, count) => {\n  if (count === 0) {\n    return (\n      <TableRow>\n        <TableCell\n          colSpan={size(columns)}\n        >\n          {getEmptyContent()}\n        </TableCell>\n      </TableRow>\n    );\n  }\n  return data.map((row) => (\n    <TableRow key={row[keyId]}>\n      {\n        columns.map((column, index) => {\n          const key = index;\n          return (\n            <TableCell\n              style={column.style || {}}\n              key={key}\n            >\n              {getCellContent(row, column, index)}\n            </TableCell>\n          );\n        })\n      }\n    </TableRow>\n  ));\n};\n\nconst DataTable = ({\n  columns,\n  data,\n  keyId,\n  loading,\n  loadingText,\n  handleChangePage,\n  handleChangeRowsPerPage,\n  rowsPerPage,\n  page,\n  count,\n}) => {\n  const classes = useStyles();\n  if (loading) {\n    return getLoaderContent(loadingText);\n  }\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {\n              columns.map((column, index) => {\n                const key = `${column.text}+${index}`;\n                return (\n                  <TableCell\n                    key={key}\n                  >\n                    {column.text}\n                  </TableCell>\n                );\n              })\n            }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {getTableBody(data, columns, keyId, count)}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              count={count}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nclass TableComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      rowsPerPage: 5,\n    };\n  }\n\n  handleChangePage = (event, page) => {\n    this.setState({\n      page,\n    });\n  };\n\n  handleChangeRowsPerPage = (event) => {\n    const rowsPerPage = parseInt(event.target.value, 10);\n    this.setState({\n      rowsPerPage,\n      page: 0,\n    });\n  };\n\n  getData = () => {\n    const { rowsPerPage, page } = this.state;\n    const { data } = this.props;\n    if (rowsPerPage > 0) {\n      const rows = data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n      return rows;\n    }\n    return data;\n  }\n\n  render() {\n    const {\n      columns, keyId, loading, loadingText, data,\n    } = this.props;\n    const { page, rowsPerPage } = this.state;\n    const rows = this.getData();\n    return (\n      <DataTable\n        columns={columns}\n        data={rows}\n        count={size(data)}\n        keyId={keyId}\n        loading={loading}\n        loadingText={loadingText}\n        handleChangePage={this.handleChangePage}\n        handleChangeRowsPerPage={this.handleChangeRowsPerPage}\n        page={page}\n        rowsPerPage={rowsPerPage}\n      />\n    );\n  }\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.instanceOf(Array).isRequired,\n  data: PropTypes.instanceOf(Array).isRequired,\n  keyId: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  count: PropTypes.number.isRequired,\n};\n\nTableComponent.propTypes = {\n  columns: PropTypes.instanceOf(Array).isRequired,\n  data: PropTypes.instanceOf(Array).isRequired,\n  keyId: PropTypes.string.isRequired,\n  loading: PropTypes.bool,\n  loadingText: PropTypes.string,\n};\n\nTableComponent.defaultProps = {\n  loading: false,\n  loadingText: 'Loading ...',\n};\n\nconst ToolWrapper = styled.div`\n  min-height: 100px;\n  width: 100%;\n  padding: 20px 0;\n  div {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nexport default TableComponent;\n","import React from 'react';\nimport {\n  Select, InputBase, MenuItem, CircularProgress,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { uniqueId } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst Input = withStyles((theme) => ({\n  root: {\n    'label + &': {\n      marginTop: theme.spacing(3),\n    },\n  },\n  input: {\n    borderRadius: 4,\n    position: 'relative',\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #ced4da',\n    fontSize: 16,\n    padding: '10px 26px 10px 12px',\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\n    '&:focus': {\n      borderRadius: 4,\n      borderColor: '#80bdff',\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n    },\n  },\n}))(InputBase);\n\nconst getLoaderInCurrentValue = (currentValue, optionValue) => {\n  if (currentValue === optionValue) {\n    return (\n      <span>\n        <CircularProgress\n          size={15}\n          style={{ marginRight: '10px' }}\n        />\n      </span>\n    );\n  }\n  return null;\n};\n\nconst SelectComponent = ({\n  currentValue,\n  handleChange,\n  options,\n  loading,\n  style,\n}) => (\n  <Select\n    style={style}\n    value={currentValue}\n    onChange={(event) => {\n      if (!loading && handleChange) {\n        handleChange(event);\n      }\n    }}\n    input={<Input />}\n    disabled={loading}\n  >\n    {\n      options.map((option) => (\n        <MenuItem\n          value={option.value}\n          key={uniqueId()}\n        >\n          {loading && getLoaderInCurrentValue(currentValue, option.value)}\n          {option.label}\n        </MenuItem>\n      ))\n    }\n  </Select>\n);\n\nSelectComponent.propTypes = {\n  currentValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  handleChange: PropTypes.func.isRequired,\n  options: PropTypes.instanceOf(Array).isRequired,\n  loading: PropTypes.bool,\n  style: PropTypes.instanceOf(Object),\n};\n\nSelectComponent.defaultProps = {\n  currentValue: '',\n  loading: false,\n  style: {},\n};\n\nexport default SelectComponent;\n","const parseIdentifier = (text = '') => {\n  if (text.indexOf('@')) {\n    const [parsedText] = text.split('@');\n    return parsedText;\n  }\n  return text;\n};\n\nconst humanizeDuration = (duration = 0) => {\n  const date = new Date(0);\n  date.setSeconds(duration);\n  const timeString = date.toISOString().substr(11, 8);\n  return timeString;\n};\n\nexport {\n  parseIdentifier,\n  humanizeDuration,\n};\n","import React from 'react';\nimport { get, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport DataTable from '../global/DataTable';\nimport Select from '../global/Select';\nimport { parseIdentifier, humanizeDuration } from '../../helpers/parser';\n\nconst statusDropdownOptions = [\n  {\n    label: 'New',\n    value: 'new',\n  },\n  {\n    label: 'Saved',\n    value: 'saved',\n  },\n  {\n    label: 'Deleted',\n    value: 'deleted',\n  },\n];\n\nconst getDropDownStatus = (cell, row, handleChange, status) => {\n  const { folder } = row;\n  let isLoading = false;\n  if (status && !isEmpty(status)) {\n    isLoading = status.loading;\n  }\n  return (\n    <Select\n      currentValue={folder}\n      handleChange={(event) => handleChange(row, event.target.value)}\n      options={statusDropdownOptions}\n      loading={isLoading}\n      style={{ width: '125px' }}\n    />\n  );\n};\n\nconst getColumns = (actions, status) => {\n  const columns = [\n    {\n      text: 'Status',\n      dataKey: 'folder',\n      formatter: (cell, row) => getDropDownStatus(cell,\n        row,\n        actions.handleStatusChange,\n        status[get(row, 'media_id')]),\n    },\n    {\n      text: 'From',\n      dataKey: 'from',\n      formatter: (cell, row) => {\n        const { from } = row;\n        return parseIdentifier(from);\n      },\n    },\n    {\n      text: 'To',\n      dataKey: 'to',\n      formatter: (cell, row) => {\n        const { to } = row;\n        return parseIdentifier(to);\n      },\n    },\n    {\n      text: 'Duration',\n      dataKey: 'length',\n      formatter: (cell, row) => {\n        const { length } = row;\n        return humanizeDuration(length);\n      },\n    },\n  ];\n  return columns;\n};\n\nconst VoiceMailTable = ({\n  data,\n  loading,\n  handleStatusChange,\n  statusChange,\n}) => {\n  const columns = getColumns({ handleStatusChange }, statusChange);\n  return (\n    <DataTable\n      columns={columns}\n      data={data}\n      keyId=\"media_id\"\n      loading={loading}\n    />\n  );\n};\n\nVoiceMailTable.propTypes = {\n  data: PropTypes.instanceOf(Array),\n  loading: PropTypes.bool,\n  handleStatusChange: PropTypes.func.isRequired,\n  statusChange: PropTypes.instanceOf(Object).isRequired,\n};\n\nVoiceMailTable.defaultProps = {\n  data: [],\n  loading: false,\n};\n\nexport default VoiceMailTable;\n","import React from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\nconst Alert = ({ children, variant, onClose }) => (\n  <MuiAlert\n    elevation={6}\n    variant=\"filled\"\n    severity={variant}\n    onClose={onClose}\n  >\n    {children}\n  </MuiAlert>\n);\n\nconst SnackBar = ({\n  handleClose,\n  open,\n  variant,\n  content,\n}) => (\n  <Snackbar\n    open={open}\n    autoHideDuration={6000}\n    onClose={handleClose}\n    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n  >\n    <Alert\n      onClose={handleClose}\n      variant={variant}\n    >\n      {content}\n    </Alert>\n  </Snackbar>\n);\n\nSnackBar.propTypes = {\n  open: PropTypes.bool,\n  handleClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n  content: PropTypes.node,\n};\n\nSnackBar.defaultProps = {\n  open: false,\n  handleClose: () => {},\n  variant: 'success',\n  content: <div />,\n};\n\nAlert.propTypes = {\n  children: PropTypes.node,\n  variant: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n  onClose: PropTypes.func,\n};\n\nAlert.defaultProps = {\n  children: <div />,\n  variant: 'success',\n  onClose: () => {},\n};\n\nexport default SnackBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport { Box, Button } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { ArrowBackIos } from '@material-ui/icons';\nimport Navbar from '../global/Navbar';\nimport VoiceMailTable from './VoiceMailTable';\nimport SnackBar from '../global/SnackBar';\nimport { goTo } from '../../actions/AppActions';\n\nconst styles = {\n  box: {\n    margin: '20px',\n  },\n};\n\nclass VoiceMailMessagesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snackbar: {\n        type: 'success',\n        text: '',\n        open: false,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchMessages,\n      getVoiceMailBoxes,\n      setCurrentVoiceMailBox,\n      match,\n    } = this.props;\n    getVoiceMailBoxes()\n      .then(() => {\n        const vmBoxId = get(match.params, 'vmBoxId', '');\n        setCurrentVoiceMailBox(vmBoxId);\n        return fetchMessages();\n      })\n      .then(() => {\n        this.handleSnackbarContent('success', 'Messages retrieved');\n      })\n      .catch(() => {\n        this.handleSnackbarContent('error', 'Error retrieving messages');\n      });\n  }\n\n  handleSnackbarContent = (type, message) => {\n    this.setState({\n      snackbar: {\n        type,\n        text: message,\n        open: true,\n      },\n    });\n  }\n\n  handleStatusChange = (data, status) => {\n    const { changeMessageStatus } = this.props;\n    const messageId = get(data, 'media_id');\n    changeMessageStatus(messageId, status)\n      .then(() => {\n        this.handleSnackbarContent('success', 'Message status successfully');\n      })\n      .catch(() => {\n        this.handleSnackbarContent('error', 'Error changing status');\n      });\n  }\n\n  handleSnackbarClose = () => {\n    this.setState(({ snackbar }) => ({\n      snackbar: {\n        ...snackbar,\n        open: false,\n      },\n    }));\n  }\n\n  goToRoot = () => {\n    const { history } = this.props;\n    goTo(history, '/');\n  }\n\n  getHeaderTitle = () => {\n    const { currentVoiceMailBox } = this.props;\n    if (currentVoiceMailBox && currentVoiceMailBox.name) {\n      return `${currentVoiceMailBox.name} - Messages`;\n    }\n    return '';\n  }\n\n  render() {\n    const { snackbar } = this.state;\n    const {\n      messages, loadingFetch, statusChange,\n    } = this.props;\n    const title = this.getHeaderTitle();\n    return (\n      <div>\n        <Navbar\n          title={title}\n        />\n        <Box\n          component=\"div\"\n          style={styles.box}\n        >\n          <BackWardWrapper>\n            {\n              !loadingFetch\n                && (\n                  <Button\n                    onClick={this.goToRoot}\n                  >\n                    <ArrowBackIos />\n                    <span>Go to VoiceMail Boxes List</span>\n                  </Button>\n                )\n            }\n          </BackWardWrapper>\n          <VoiceMailTable\n            data={messages}\n            loading={loadingFetch}\n            handleStatusChange={this.handleStatusChange}\n            statusChange={statusChange}\n          />\n        </Box>\n        <SnackBar\n          open={snackbar.open}\n          content={snackbar.text}\n          variant={snackbar.type}\n          handleClose={this.handleSnackbarClose}\n        />\n      </div>\n    );\n  }\n}\n\nVoiceMailMessagesComponent.propTypes = {\n  fetchMessages: PropTypes.func.isRequired,\n  changeMessageStatus: PropTypes.func.isRequired,\n  setCurrentVoiceMailBox: PropTypes.func.isRequired,\n  getVoiceMailBoxes: PropTypes.func.isRequired,\n  messages: PropTypes.instanceOf(Array).isRequired,\n  loadingFetch: PropTypes.bool.isRequired,\n  statusChange: PropTypes.instanceOf(Object).isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  match: PropTypes.instanceOf(Object).isRequired,\n  currentVoiceMailBox: PropTypes.instanceOf(Object).isRequired,\n};\n\nconst BackWardWrapper = styled.div`\n  height: 50px;\n  margin: 15px 0;\n  display: flex;\n  align-items: center;\n  * {\n    text-transform: none !important;\n  }\n`;\n\nexport default VoiceMailMessagesComponent;\n","import axios from 'axios';\nimport { keyBy, size, find } from 'lodash';\nimport { getAction, goTo } from './AppActions';\nimport {\n  LOADING_FETCH_VMBOXES,\n  SUCCESS_FETCH_VMBOXES,\n  STOP_LOADING_FETCH_VMBOXES,\n} from '../actionTypes/VoiceMailBoxTypes';\nimport { SET_CURRENT_VOICEMAIL_BOX } from '../actionTypes/VoiceMailTypes';\n\nexport const getVoiceMailBoxes = (forceFetch) => (dispatch, getState) => {\n  const { VoiceMailBoxReducer: { vmBoxes } } = getState();\n  if (size(vmBoxes) === 0 || forceFetch) {\n    dispatch(getAction(LOADING_FETCH_VMBOXES));\n    return axios\n      .get('/api/accounts/vmboxes')\n      .then((response) => {\n        dispatch(getAction(STOP_LOADING_FETCH_VMBOXES));\n        const { data } = response;\n        if (data.status === 'success') {\n          const vmBoxesData = keyBy(data.data, 'id');\n          dispatch(getAction(SUCCESS_FETCH_VMBOXES, vmBoxesData));\n          return Promise.resolve(data.data);\n        }\n        return Promise.reject(new Error('Error: retrieving voicemail boxes'));\n      })\n      .catch((err) => {\n        dispatch(getAction(STOP_LOADING_FETCH_VMBOXES));\n        return Promise.reject(err);\n      });\n  }\n  return Promise.resolve();\n};\n\nexport const redirectToMessages = (history, data) => (dispatch) => {\n  if (data) {\n    const route = `/vmboxes/${data.id}/messages`;\n    dispatch(getAction(SET_CURRENT_VOICEMAIL_BOX, data));\n    goTo(history, route);\n  }\n};\n\nexport const setCurrentVoiceMailBox = (vmBoxId) => (dispatch, getState) => {\n  if (vmBoxId) {\n    const { VoiceMailBoxReducer: { vmBoxes } } = getState();\n    const currentVoiceMailBox = find(vmBoxes, (vmBox) => vmBox.id === vmBoxId);\n    if (currentVoiceMailBox) {\n      dispatch(getAction(SET_CURRENT_VOICEMAIL_BOX, currentVoiceMailBox));\n    }\n  }\n};\n","export const SUCCESS_FETCH_VMBOXES = 'SUCCESS_FETCH_VMBOXES';\nexport const LOADING_FETCH_VMBOXES = 'LOADING_FETCH_VMBOXES';\nexport const STOP_LOADING_FETCH_VMBOXES = 'STOP_LOADING_FETCH_VMBOXES';\n","import { connect } from 'react-redux';\nimport { values } from 'lodash';\nimport { fetchMessages, changeMessageStatus } from '../../actions/VoiceMailActions';\nimport VoiceMailMessagesComponent from './VoiceMailMessagesComponent';\nimport { setCurrentVoiceMailBox, getVoiceMailBoxes } from '../../actions/VoiceMailBoxActions';\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchMessages: () => dispatch(fetchMessages()),\n  getVoiceMailBoxes: () => dispatch(getVoiceMailBoxes()),\n  changeMessageStatus: (messageId, status) => dispatch(changeMessageStatus(messageId, status)),\n  setCurrentVoiceMailBox: (vmBoxId) => dispatch(setCurrentVoiceMailBox(vmBoxId)),\n});\n\nconst mapStateToProps = (state) => {\n  const {\n    messages,\n    currentVoiceMailBox,\n    loadingFetch,\n    statusChange,\n  } = state.VoiceMailReducer;\n  return {\n    messages: values(messages[currentVoiceMailBox.id]),\n    loadingFetch,\n    statusChange,\n    currentVoiceMailBox,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoiceMailMessagesComponent);\n","import axios from 'axios';\nimport { keyBy, size } from 'lodash';\nimport {\n  FETCH_MESSAGES,\n  LOADING_FETCH_MESSAGES,\n  STOP_LOADING_FETCH_MESSAGES,\n  LOADING_CHANGE_MESSAGE_STATUS,\n  STOP_CHANGE_MESSAGE_STATUS,\n  SUCCESS_CHANGE_MESSAGE_STATUS,\n} from '../actionTypes/VoiceMailTypes';\nimport { getAction } from './AppActions';\n\nexport const fetchMessages = (forFetch) => (dispatch, getState) => {\n  const { VoiceMailReducer: { currentVoiceMailBox, messages } } = getState();\n  const vmBoxId = currentVoiceMailBox.id;\n  if (size(messages[vmBoxId]) === 0 || forFetch) {\n    dispatch(getAction(LOADING_FETCH_MESSAGES));\n    return axios\n      .get(`/api/accounts/vmboxes/${vmBoxId}/messages`)\n      .then((response) => {\n        const messagesData = keyBy(response.data.data, 'media_id');\n        dispatch(getAction(FETCH_MESSAGES, {\n          messages: messagesData,\n          vmBoxId,\n        }));\n        dispatch(getAction(STOP_LOADING_FETCH_MESSAGES));\n        return Promise.resolve(messages);\n      })\n      .catch((err) => {\n        dispatch(getAction(STOP_LOADING_FETCH_MESSAGES));\n        return Promise.reject(err);\n      });\n  }\n  return Promise.resolve();\n};\n\nexport const changeMessageStatus = (messageId, status) => (dispatch, getState) => {\n  const { VoiceMailReducer: { currentVoiceMailBox } } = getState();\n  const vmBoxId = currentVoiceMailBox.id;\n  dispatch(getAction(LOADING_CHANGE_MESSAGE_STATUS, messageId));\n  return axios\n    .patch(`/api/accounts/vmboxes/${vmBoxId}/messages/${messageId}/changeStatus`, { status })\n    .then((response) => {\n      dispatch(getAction(STOP_CHANGE_MESSAGE_STATUS, messageId));\n      const { data } = response;\n      if (data.status === 'success') {\n        dispatch(getAction(SUCCESS_CHANGE_MESSAGE_STATUS, {\n          data: data.data,\n          vmBoxId,\n        }));\n        return Promise.resolve(data.data);\n      }\n      return Promise.reject(new Error('Error: chaginng status'));\n    })\n    .catch((err) => {\n      dispatch(getAction(STOP_CHANGE_MESSAGE_STATUS, messageId));\n      return Promise.reject(err);\n    });\n};\n","export const FETCH_MESSAGES = 'SUCCESS_FETCH_MESSAGES';\nexport const LOADING_FETCH_MESSAGES = 'LOADING_FETCH_MESSAGES';\nexport const STOP_LOADING_FETCH_MESSAGES = 'STOP_LOADING_FETCH_MESSAGES';\nexport const SUCCESS_CHANGE_MESSAGE_STATUS = 'SUCCESS_CHANGE_MESSAGE_STATUS';\nexport const LOADING_CHANGE_MESSAGE_STATUS = 'LOADING_CHANGE_MESSAGE_STATUS';\nexport const STOP_CHANGE_MESSAGE_STATUS = 'STOP_CHANGE_MESSAGE_STATUS';\nexport const SET_CURRENT_VOICEMAIL_BOX = 'SET_CURRENT_VOICEMAIL_BOX';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport DataTable from '../global/DataTable';\n\nconst getColumns = (actions) => {\n  const columns = [\n    {\n      text: 'Actions',\n      dataKey: '',\n      style: {\n        width: '100px',\n      },\n      formatter: (cell, row) => (\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          onClick={() => actions.handleManageAction(row)}\n        >\n          Manage\n        </Button>\n      ),\n    },\n    {\n      text: 'Name',\n      dataKey: 'name',\n    },\n    {\n      text: 'Messages',\n      dataKey: 'messages',\n    },\n  ];\n  return columns;\n};\n\nconst VoiceMailBoxesTable = ({\n  data,\n  loading,\n  handleManageAction,\n}) => {\n  const columns = getColumns({ handleManageAction });\n  return (\n    <DataTable\n      loading={loading}\n      keyId=\"id\"\n      data={data}\n      columns={columns}\n    />\n  );\n};\n\nVoiceMailBoxesTable.propTypes = {\n  data: PropTypes.instanceOf(Array),\n  loading: PropTypes.bool,\n  handleManageAction: PropTypes.func.isRequired,\n};\n\nVoiceMailBoxesTable.defaultProps = {\n  data: [],\n  loading: false,\n};\n\nexport default VoiceMailBoxesTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport Navbar from '../global/Navbar';\nimport VoiceMailBoxesTable from './VoiceMailBoxesTable';\n\nconst styles = {\n  box: {\n    margin: '20px',\n  },\n};\n\nclass VoiceMailBoxComponent extends Component {\n  componentDidMount() {\n    const { getVoiceMailBoxes } = this.props;\n    getVoiceMailBoxes();\n  }\n\n  handleManageAction = (data) => {\n    if (data) {\n      const { history, redirectToMessages } = this.props;\n      redirectToMessages(history, data);\n    }\n  }\n\n  render() {\n    const { loadingFetch, vmBoxes } = this.props;\n    return (\n      <div>\n        <Navbar\n          title=\"VoiceMail Boxes\"\n        />\n        <Box\n          component=\"div\"\n          style={styles.box}\n        >\n          <VoiceMailBoxesTable\n            data={vmBoxes}\n            loading={loadingFetch}\n            handleManageAction={this.handleManageAction}\n          />\n        </Box>\n      </div>\n    );\n  }\n}\n\nVoiceMailBoxComponent.propTypes = {\n  getVoiceMailBoxes: PropTypes.func.isRequired,\n  redirectToMessages: PropTypes.func.isRequired,\n  vmBoxes: PropTypes.instanceOf(Array).isRequired,\n  history: PropTypes.instanceOf(Object).isRequired,\n  loadingFetch: PropTypes.bool.isRequired,\n};\n\nexport default VoiceMailBoxComponent;\n","import { connect } from 'react-redux';\nimport { values } from 'lodash';\nimport { getVoiceMailBoxes, redirectToMessages } from '../../actions/VoiceMailBoxActions';\nimport VoiceMailBoxComponent from './VoiceMailBoxComponent';\n\nconst mapDispatchToProps = (dispatch) => ({\n  getVoiceMailBoxes: () => dispatch(getVoiceMailBoxes()),\n  redirectToMessages: (history, data) => dispatch(redirectToMessages(history, data)),\n});\n\nconst mapStateToProps = (state) => ({\n  loadingFetch: state.VoiceMailBoxReducer.loadingFetch,\n  vmBoxes: values(state.VoiceMailBoxReducer.vmBoxes),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoiceMailBoxComponent);\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport VoiceMailMessages from './components/VoiceMailMessages/VoiceMailContainer';\nimport VoiceMailBoxes from './components/VoiceMailBoxes/VoiceMailBoxContainer';\n\nconst NotFound = () => <h1>Route Not Found</h1>;\n\nconst App = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={VoiceMailBoxes} />\n      <Route path=\"/vmboxes/:vmBoxId/messages\" component={VoiceMailMessages} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default App;\n","import { get } from 'lodash';\nimport {\n  FETCH_MESSAGES,\n  LOADING_FETCH_MESSAGES,\n  STOP_LOADING_FETCH_MESSAGES,\n  LOADING_CHANGE_MESSAGE_STATUS,\n  STOP_CHANGE_MESSAGE_STATUS,\n  SUCCESS_CHANGE_MESSAGE_STATUS,\n  SET_CURRENT_VOICEMAIL_BOX,\n} from '../actionTypes/VoiceMailTypes';\n\nconst initialState = {\n  messages: {},\n  loadingFetch: true,\n  statusChange: {},\n  currentVoiceMailBox: {},\n};\n\nconst VoiceMailReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  if (type === SET_CURRENT_VOICEMAIL_BOX) {\n    return {\n      ...state,\n      currentVoiceMailBox: payload,\n    };\n  }\n  if (type === FETCH_MESSAGES) {\n    return {\n      ...state,\n      messages: {\n        ...state.messages,\n        [payload.vmBoxId]: payload.messages,\n      },\n    };\n  }\n  if (type === LOADING_FETCH_MESSAGES) {\n    return {\n      ...state,\n      loadingFetch: true,\n    };\n  }\n  if (type === STOP_LOADING_FETCH_MESSAGES) {\n    return {\n      ...state,\n      loadingFetch: false,\n    };\n  }\n  if (type === LOADING_CHANGE_MESSAGE_STATUS) {\n    return {\n      ...state,\n      statusChange: {\n        ...state.statusChange,\n        [payload]: {\n          loading: true,\n        },\n      },\n    };\n  }\n  if (type === STOP_CHANGE_MESSAGE_STATUS) {\n    return {\n      ...state,\n      statusChange: {\n        ...state.statusChange,\n        [payload]: {\n          loading: false,\n        },\n      },\n    };\n  }\n  if (type === SUCCESS_CHANGE_MESSAGE_STATUS) {\n    const messageId = get(payload.data, 'media_id');\n    return {\n      ...state,\n      messages: {\n        ...state.messages,\n        [payload.vmBoxId]: {\n          ...state.messages[payload.vmBoxId],\n          [messageId]: payload.data,\n        },\n      },\n    };\n  }\n  return state;\n};\n\nexport default VoiceMailReducer;\n","import {\n  LOADING_FETCH_VMBOXES,\n  STOP_LOADING_FETCH_VMBOXES,\n  SUCCESS_FETCH_VMBOXES,\n} from '../actionTypes/VoiceMailBoxTypes';\n\nconst initialState = {\n  vmBoxes: {},\n  loadingFetch: false,\n};\n\nconst VoiceMailBoxReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  if (type === SUCCESS_FETCH_VMBOXES) {\n    return {\n      ...state,\n      vmBoxes: payload,\n    };\n  }\n  if (type === LOADING_FETCH_VMBOXES) {\n    return {\n      ...state,\n      loadingFetch: true,\n    };\n  }\n  if (type === STOP_LOADING_FETCH_VMBOXES) {\n    return {\n      ...state,\n      loadingFetch: false,\n    };\n  }\n  return state;\n};\n\nexport default VoiceMailBoxReducer;\n","import { combineReducers } from 'redux';\nimport VoiceMailReducer from './VoiceMailReducer';\nimport VoiceMailBoxReducer from './VoiceMailBoxReducer';\n\nexport default combineReducers({\n  VoiceMailReducer,\n  VoiceMailBoxReducer,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducers from '../reducers';\n\nconst { NODE_ENV } = process.env;\n\nconst store = NODE_ENV !== 'production'\n  ? createStore(rootReducers, composeWithDevTools(applyMiddleware(ReduxThunk)))\n  : createStore(rootReducers, compose(\n    applyMiddleware(ReduxThunk),\n  ));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport axios from 'axios';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nconst { NODE_ENV } = process.env;\n\naxios.defaults.baseURL = NODE_ENV !== 'production' ? 'http://localhost:3001' : '';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}